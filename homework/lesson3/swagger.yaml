swagger: "2.0"
info:
  title: Shop
  version: 1.0.0
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      itemId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      email:
        type: string
      password:
        type: string
  Item:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      price:
        type: integer
        format: int64
      image_link:
        type: string
paths:
  /store/order:
    post:
      description: Place an order for a item
      operationId: "placeOrder"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the item"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1. Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of item that needs to be fetched"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: user name for login
          required: true
          type: string
      responses:
        200:
          description: success
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              type: string
              format: date-time
        400:
          description: Invalid username/password supplied
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          type: integer
          format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          type: integer
          format: int64
        - name: price_range
          in: query
          description: Range price
          required: false
          type: "array"
          items:
            type: "string"
            enum:
              - '#price_min'
              - '#price_max'
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'
        400:
          description: Invalid price range
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Item object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        "405":
          description: "Invalid input"
      security:
        - api_key: []
  /items/upload_image:
    post:
      summary: "uploads an image"
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: true
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: true
          type: "file"
      responses:
        200:
          description: successful operation
      security:
        - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Invalid ID supplied
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          type: integer
          format: int64
        - name: "name"
          in: "formData"
          description: "Updated name of the item"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the item"
          required: false
          type: "string"
      responses:
        405:
          description: Invalid input
      security:
        - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
      security:
        - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"